// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CategoryEnum = "meeting" | "task" | "information" | "thought"

export type ClassificationPublic = {
  id: string
  category: CategoryEnum
  confidence: number
  priority: PriorityEnum
  action_required: boolean
  summary: string
  dates: Array<string>
  times: Array<string>
  contact: string | null
  projects: Array<string>
  keywords: Array<string>
  created_at: string
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title?: string
  description?: string | null
  source?: string | null
  message_type?: string | null
  original_text?: string | null
}

export type ItemPublic = {
  title?: string
  description?: string | null
  id: string
  owner_id: string
  source?: string | null
  message_type?: string | null
  created_at: string
  classification?: ClassificationPublic | null
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type OAuthAccountPublic = {
  id: string
  provider: string
  provider_account_email: string
  created_at: string
  expires_at: string | null
}

export type PriorityEnum = "low" | "medium" | "high"

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type TelegramAuthRequest = {
  phone: string
}

export type TelegramVerifyRequest = {
  session_key: string
  phone: string
  code: string
  password?: string | null
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  telegram_session?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  telegram_session?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
  telegram_tag?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  telegram_session?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
  telegram_tag?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type ItemsReadItemsData = {
  /**
   * Filter by action required
   */
  actionRequired?: boolean | null
  /**
   * Filter by category
   */
  category?: CategoryEnum | null
  /**
   * Filter by contact name
   */
  contact?: string | null
  limit?: number
  /**
   * Filter by message type
   */
  messageType?: string | null
  /**
   * Filter by priority
   */
  priority?: PriorityEnum | null
  /**
   * Search in title, description, and original text
   */
  search?: string | null
  skip?: number
  /**
   * Filter by source
   */
  source?: string | null
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type OauthGoogleOauthLoginResponse = {
  [key: string]: string
}

export type OauthGoogleOauthCallbackData = {
  code: string
  error?: string | null
  state: string
}

export type OauthGoogleOauthCallbackResponse = unknown

export type OauthGetGoogleAccountsResponse = Array<OAuthAccountPublic>

export type OauthDisconnectGoogleAccountData = {
  accountId: string
}

export type OauthDisconnectGoogleAccountResponse = Message

export type OauthRefreshGoogleTokenData = {
  accountId: string
}

export type OauthRefreshGoogleTokenResponse = Message

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type TelegramStartTelegramAuthData = {
  requestBody: TelegramAuthRequest
}

export type TelegramStartTelegramAuthResponse = unknown

export type TelegramVerifyTelegramAuthData = {
  requestBody: TelegramVerifyRequest
}

export type TelegramVerifyTelegramAuthResponse = unknown

export type TelegramDisconnectTelegramResponse = Message

export type TelegramGetTelegramStatusResponse = unknown

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
